DROP DATABASE IF EXISTS BD_HASH;

CREATE DATABASE BD_HASH;

USE BD_HASH;

-- TABLAS --

CREATE TABLE USUARIO (
	USU_CVE				INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	USU_NOMBRE			NVARCHAR(100) NOT NULL,
	USU_USU				NVARCHAR(50) NOT NULL,
	USU_PAS				NVARCHAR(50) NOT NULL,
	USU_FOTO			NVARCHAR(1000) NOT NULL, 
	USU_ESTATUS			INT,
	USU_FECHA_REGISTRO	TIMESTAMP
)ENGINE= InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE MENSAJE (
	MEN_CVE				INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	USU_CVE				INT NOT NULL,	
	MEN_H				LONGBLOB NOT NULL,-- hash del mensaje		
	MEN_STUATUS			INT NOT NULL, -- 0 NO VISTO, 1 VISTO
	MEN_FECHA_REGISTRO	TIMESTAMP,
	
	FOREIGN KEY (USU_CVE) REFERENCES USUARIO(USU_CVE)
	

)ENGINE= InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE LLAVEP (
	KEY_CVE				INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	USU_CVE				INT NOT NULL,
	MEN_LLAVE			INT,
	KEY_PUBLICA			LONGBLOB NOT NULL,
	KEY_FECHA_REGISTRO	TIMESTAMP,

	FOREIGN KEY (USU_CVE) REFERENCES USUARIO(USU_CVE),
	FOREIGN KEY (MEN_LLAVE) REFERENCES MENSAJE(MEN_CVE)


)ENGINE= InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE FIRMA(
	FIR_CVE				INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIR_FIRMA			LONGBLOB NOT NULL,
	USU_CVE				INT NOT NULL,
	MEN_FIRMA		 	INT NOT NULL,
	FIR_FECHA_REGISTRO	TIMESTAMP,

	FOREIGN KEY (USU_CVE) REFERENCES USUARIO(USU_CVE),
	FOREIGN KEY (MEN_FIRMA) REFERENCES MENSAJE(MEN_CVE)

)ENGINE= InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE TEMPORAL
(
CVE_TEMPORAL INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
FIR_FIRMA LONGBLOB,
MEN_H LONGBLOB,
KEY_PUBLICA LONGBLOB
)ENGINE= InnoDB DEFAULT CHARSET=utf8;


-- PROCEDIMIENTOS ALMACENADOS --
-- registro de usuario RegistrarUsuario
DELIMITER $$
CREATE PROCEDURE tspRegistrarUsuario
(
IN NOM VARCHAR(50),
IN USU VARCHAR(50),
IN CONTRA VARCHAR(50),
IN FOTO VARCHAR(1000)
)
BEGIN 
IF EXISTS(SELECT * FROM USUARIO WHERE USU_USU=USU) THEN
SELECT 0 CLAVE;
ELSE
INSERT INTO USUARIO VALUES(NULL,NOM,USU,CONTRA,FOTO,1,now());
SELECT USU_CVE CLAVE
FROM USUARIO
WHERE USU_USU=USU;
END IF;
END $$

DELIMITER $$
CREATE PROCEDURE tspValidarAcceso
(
IN USU VARCHAR(20),
IN CONTRA VARCHAR(20)
)
BEGIN 
IF EXISTS(SELECT * FROM USUARIO WHERE USU_USU=USU AND USU_PAS=CONTRA) THEN
SELECT USU_CVE CLAVE, USU_NOMBRE USUARIO, USU_ESTATUS ESTATUS, USU_USU USUARIO
FROM USUARIO
WHERE USU_USU = USU
AND USU_PAS=CONTRA;
ELSE
SELECT '0' CLAVE;
END IF;
END $$

-- listar llaves pÃºblicas y sus usuarios listarLlavesUsuarios
DELIMITER $$
CREATE PROCEDURE tsplistarLlavesUsuarios
(
)
BEGIN 
IF EXISTS(SELECT * FROM LLAVEP WHERE KEY_CVE!=0) THEN
SELECT B.KEY_CVE CLAVE, B.KEY_PUBLICA LLAVEP, A.USU_NOMBRE NOMBRE
FROM USUARIO A, LLAVEP B
WHERE B.USU_CVE=A.USU_CVE
AND A.USU_ESTATUS=1;
ELSE 
SELECT 0;
END IF;
END $$


-- firma de un mensaje n-1 obtenerFirmaAnterior
DELIMITER $$
CREATE PROCEDURE tspobtenerFirmaAnterior
(
IN CVEMEN INT -- clave del mensaje actual
)
BEGIN 
IF EXISTS(SELECT * FROM MENSAJE WHERE MEN_CVE=CVEMEN AND MEN_CVE!=1) THEN
SELECT A.MEN_CVE CMENSA,C.USU_CVE CUSU,C.USU_NOMBRE USUARIO,B.FIR_FIRMA FIRMAAN
FROM  MENSAJE A, FIRMA B, USUARIO C
WHERE A.MEN_CVE=(CVEMEN-1)
AND B.MEN_FIRMA=CVEMEN
AND A.USU_CVE=C.USU_CVE;
ELSE 
SELECT 0;
END IF;
END $$

DELIMITER $$
CREATE PROCEDURE tspRegistrarUsuarioI
(
IN NOM VARCHAR(50),
IN USU VARCHAR(50),
IN CONTRA VARCHAR(50),
IN FOTO VARCHAR(1000),
IN H LONGBLOB,
IN FIRMA LONGBLOB
)
BEGIN 
IF EXISTS(SELECT * FROM USUARIO WHERE USU_USU=USU) THEN
	SELECT 0 CLAVE;
ELSE
	INSERT INTO USUARIO VALUES(NULL,NOM,USU,CONTRA,FOTO,1,now());
	set @id=last_insert_id();	
	INSERT INTO MENSAJE VALUES(NULL, @id, h, 1, now());
	set @Mid=last_insert_id();
	INSERT INTO FIRMA VALUES(NULL, FIRMA, @id, @Mid, now());
	INSERT INTO LLAVEP VALUES(NULL, @id, @Mid,'0', now());


	SELECT USU_CVE CLAVE
	FROM USUARIO
	WHERE USU_USU=USU;

END IF;
END $$

DELIMITER $$
CREATE PROCEDURE tspObtenerUltH(
in us int
)
BEGIN
IF EXISTS(SELECT USU_CVE FROM USUARIO WHERE USU_CVE=US) THEN
	SELECT MEN_H H, MEN_CVE CVE FROM MENSAJE WHERE USU_CVE=us AND MEN_FECHA_REGISTRO = (SELECT MAX(MEN_FECHA_REGISTRO) from MENSAJE WHERE USU_CVE=us);
else
	select '0';
END IF;
END $$

DELIMITER $$
CREATE PROCEDURE tspFirmarNuevoMensaje
(
IN CVE INT,-- clave del usuario
IN LLAVEP BLOB, -- llave publica 
IN FIRMA BLOB, -- firma del nuevo mensaje
IN H BLOB, -- h del nuevo mensaje 
IN ZELDA BLOB
)
BEGIN 
DECLARE IDMEN INT;
DECLARE IDLLAVE INT;
IF EXISTS(SELECT FIR_FIRMA FROM FIRMA WHERE FIR_FIRMA=FIRMA) THEN
SELECT 0;
ELSE
INSERT INTO MENSAJE VALUES(NULL,CVE,H,1,NOW());
SET IDMEN=@@IDENTITY;
INSERT INTO FIRMA VALUES(NULL,FIRMA,CVE,IDMEN,NOW());
SET IDLLAVE=(SELECT MAX(KEY_CVE) FROM LLAVEP WHERE USU_CVE=CVE);
UPDATE LLAVEP SET KEY_PUBLICA=ZELDA 
WHERE KEY_CVE = IDLLAVE;
INSERT INTO LLAVEP VALUES(NULL,CVE,IDMEN,LLAVEP,NOW());
SELECT KEY_CVE FROM LLAVEP WHERE KEY_CVE=(SELECT MAX(KEY_CVE) FROM LLAVEP) AND USU_CVE=CVE;
END IF;
END $$

DELIMITER $$
CREATE PROCEDURE tspBuscarUsuario
(
IN FIRMA LONGBLOB -- clave del usuario
)
BEGIN 
IF EXISTS(SELECT A.FIR_CVE IDFIRMA FROM FIRMA A, USUARIO B WHERE A.USU_CVE = B.USU_CVE) THEN

	SELECT A.FIR_CVE IDFIRMA, A.USU_CVE IDUSU, B.USU_USU USUARIO, B.USU_NOMBRE NOMBRE  
	FROM FIRMA A, USUARIO B
	WHERE A.USU_CVE = B.USU_CVE
	AND A.FIR_FIRMA = FIRMA;

ELSE
	SELECT '0';
END IF;
END $$


DELIMITER $$
CREATE PROCEDURE VALORES
(IN VAL INT,
IN CVE INT
)
BEGIN
DECLARE CONTADOR INT;
DECLARE H_ANTE LONGBLOB;
DECLARE LINK_ANTE LONGBLOB;
DECLARE FIRMA_ANTE LONGBLOB;
DECLARE FIRMA LONGBLOB;
DECLARE CLAVE INT;


SET CONTADOR=1;
SET SQL_SAFE_UPDATES = 0;
DELETE FROM TEMPORAL WHERE CVE_TEMPORAL>0;
WHILE (CONTADOR<=VAL) DO
IF(CVE=(SELECT F.USU_CVE FROM FIRMA F WHERE F.FIR_CVE=CONTADOR)) THEN 
INSERT INTO TEMPORAL VALUES(NULL,(SELECT F.FIR_FIRMA FROM FIRMA F WHERE F.USU_CVE=CVE and F.FIR_CVE=CONTADOR),(SELECT M.MEN_H FROM MENSAJE M WHERE M.USU_CVE=CVE AND M.MEN_CVE=CONTADOR),(SELECT L.KEY_PUBLICA FROM LLAVEP L WHERE L.USU_CVE=CVE AND L.KEY_CVE=CONTADOR));
END IF;
SET CONTADOR = CONTADOR +1;
END WHILE;
SET CLAVE = (SELECT MAX(CVE_TEMPORAL) FROM TEMPORAL);
SET H_ANTE =(SELECT MEN_H FROM TEMPORAL WHERE CVE_TEMPORAL=CLAVE-1);
SET FIRMA_ANTE =(SELECT FIR_FIRMA FROM TEMPORAL WHERE CVE_TEMPORAL=CLAVE-1);
SET LINK_ANTE =(SELECT KEY_PUBLICA FROM TEMPORAL WHERE CVE_TEMPORAL=CLAVE-1);
SET FIRMA=(SELECT KEY_PUBLICA FROM TEMPORAL WHERE CVE_TEMPORAL=CLAVE);
SELECT H_ANTE, FIRMA_ANTE, LINK_ANTE, FIRMA LLAVEP;
END$$

DELIMITER $$
CREATE PROCEDURE tspVFirma
(
IN USU_CVE INT
)
BEGIN
DECLARE NUM INT;
DECLARE CONTADOR INT;
SET NUM = (SELECT COUNT(F.FIR_FIRMA) FROM FIRMA F);
CALL VALORES(NUM,USU_CVE);
END$$

DELIMITER $$
CREATE PROCEDURE tspBusquedaUsuario
(
IN US NVARCHAR(100)
)
BEGIN
IF EXISTS(SELECT USU_USU FROM USUARIO WHERE USU_USU LIKE CONCAT('%',US,'%')) THEN
SELECT USU_USU
FROM USUARIO
WHERE USU_USU LIKE CONCAT('%',US,'%');
ELSE 
SELECT 0;
END IF;
END$$

DELIMITER $$
CREATE PROCEDURE tspWhile
(
IN NUM INT,
IN CVE INT
)
BEGIN
DECLARE CONTADOR INT;
SET CONTADOR=1;
SET SQL_SAFE_UPDATES = 0;
DELETE FROM TEMPORAL WHERE CVE_TEMPORAL>0;
WHILE (CONTADOR<=NUM) DO
IF(CVE=(SELECT F.USU_CVE FROM FIRMA F WHERE F.FIR_CVE=CONTADOR)) THEN 
INSERT INTO TEMPORAL VALUES(NULL,(SELECT F.FIR_FIRMA FROM FIRMA F WHERE F.USU_CVE=CVE AND F.FIR_CVE=CONTADOR),(SELECT M.MEN_H FROM MENSAJE M WHERE M.USU_CVE=CVE AND M.MEN_CVE=CONTADOR),(SELECT L.KEY_PUBLICA FROM LLAVEP L WHERE L.USU_CVE=CVE AND L.KEY_CVE=CONTADOR));
END IF;
SET CONTADOR = CONTADOR +1;
END WHILE;
SELECT * FROM TEMPORAL;
END$$

DELIMITER $$
CREATE PROCEDURE tspBusquedaUsuarioH
(
IN US NVARCHAR(100)
)
BEGIN
DECLARE IND INT;
DECLARE NUM INT;
SET IND=(SELECT USU_CVE FROM USUARIO WHERE USU_USU= US);
SET NUM = (SELECT COUNT(F.USU_CVE) FROM FIRMA F);
CALL tspWhile(NUM,IND);
END$$

